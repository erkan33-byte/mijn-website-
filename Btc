<!doctype html>
<html lang="nl">
<head>
  <meta charset="utf-8" />
  <title>BTC Key Generator + Balance Check (educatief)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { font-family: system-ui, -apple-system, Roboto, Helvetica, Arial; max-width:820px; margin:32px auto; padding:0 16px; color:#111; }
    h1{margin-bottom:4px}
    .card{border:1px solid #ddd; padding:16px; border-radius:8px; margin-top:12px;}
    label{display:block; margin:8px 0 4px; font-weight:600}
    textarea,input{width:100%; box-sizing:border-box; padding:8px; font-family:monospace}
    button{padding:10px 14px; margin-top:8px}
    .small{font-size:0.9rem; color:#555}
    .danger{color:#a00; font-weight:700}
    .row{display:flex; gap:8px}
    .col{flex:1}
  </style>
  <!-- libs from unpkg CDN; vereist internettoegang als je deze direct gebruikt -->
  <script src="https://unpkg.com/bitcoinjs-lib@6.1.0/dist/bitcoinjs-lib.min.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
</head>
<body>
  <h1>BTC key generator + saldo check</h1>
  <p class="small">Generates a private key (WIF) and P2PKH address in your browser and checks balance via public APIs (Blockstream primary, BlockCypher fallback).</p>

  <div class="card">
    <label>Random Private Key (WIF)</label>
    <textarea id="wif" rows="2" readonly></textarea>

    <label>Public Address (P2PKH)</label>
    <input id="address" readonly />

    <div class="row">
      <div class="col">
        <button id="generate">Generate new keypair</button>
      </div>
      <div class="col">
        <button id="check">Check saldo</button>
      </div>
    </div>

    <p class="small">Balance: <span id="balance">—</span></p>
    <p class="small">Confirmed sats: <span id="confirmed">—</span> · Unconfirmed sats: <span id="unconfirmed">—</span></p>

    <div style="margin-top:10px">
      <label>Raw API response (debug)</label>
      <textarea id="apiresp" rows="6" readonly></textarea>
    </div>

    <p class="danger small">WAARSCHUWING: als iemand toegang heeft tot de privé-sleutel kan diegene al je bitcoins uitgeven. Gebruik alleen op een veilige, offline machine voor echte fondsen.</p>
  </div>

  <script>
    // gebruik bitcoinjs-lib (import via CDN above)
    const bitcoin = window.bitcoinjsLib;

    // mainnet network object
    const NETWORK = bitcoin.networks.bitcoin;

    // helper: generate random keypair and WIF
    function generateKeyPair() {
      // generate random keypair
      const keyPair = bitcoin.ECPair.makeRandom({ network: NETWORK });
      const { publicKey } = keyPair;
      // derive P2PKH address
      const { address } = bitcoin.payments.p2pkh({ pubkey: publicKey, network: NETWORK });
      const wif = keyPair.toWIF();
      return { address, wif };
    }

    // Update UI
    function setGenerated(addr, wif) {
      document.getElementById('address').value = addr;
      document.getElementById('wif').value = wif;
      document.getElementById('balance').innerText = '—';
      document.getElementById('confirmed').innerText = '—';
      document.getElementById('unconfirmed').innerText = '—';
      document.getElementById('apiresp').value = '';
    }

    document.getElementById('generate').addEventListener('click', () => {
      const { address, wif } = generateKeyPair();
      setGenerated(address, wif);
    });

    // primary: Blockstream Esplora API (fast & public)
    async function checkBalanceBlockstream(addr) {
      // GET https://blockstream.info/api/address/:address
      // returns chain_stats and mempool_stats
      const url = `https://blockstream.info/api/address/${addr}`;
      const r = await axios.get(url, { timeout: 10000 });
      // chain_stats has funded_txo_sum / spent_txo_sum / tx_count etc.
      // compute balance in satoshis:
      // newer Esplora returns chain_stats.funded_txo_sum - chain_stats.spent_txo_sum
      const cs = r.data.chain_stats || {};
      const ms = r.data.mempool_stats || {};
      const funded = (cs.funded_txo_sum || 0) + (ms.funded_txo_sum || 0);
      const spent  = (cs.spent_txo_sum  || 0) + (ms.spent_txo_sum  || 0);
      const confirmed = (cs.funded_txo_sum || 0) - (cs.spent_txo_sum || 0);
      const unconfirmed = funded - spent - confirmed;
      return { raw: r.data, confirmed, unconfirmed, total: confirmed + unconfirmed, source: 'blockstream' };
    }

    // fallback: BlockCypher Address API (also widely used)
    async function checkBalanceBlockCypher(addr) {
      // GET https://api.blockcypher.com/v1/btc/main/addrs/:address
      const url = `https://api.blockcypher.com/v1/btc/main/addrs/${addr}/balance`;
      const r = await axios.get(url, { timeout: 10000 });
      // BlockCypher returns: balance, unconfirmed_balance, final_balance in satoshis
      const data = r.data || {};
      const confirmed = data.balance != null ? data.balance : 0;
      const unconfirmed = data.unconfirmed_balance != null ? data.unconfirmed_balance : 0;
      return { raw: data, confirmed, unconfirmed, total: (confirmed + unconfirmed), source: 'blockcypher' };
    }

    // Master check function: try blockstream, fallback to blockcypher
    async function checkBalance(addr) {
      document.getElementById('balance').innerText = 'checking...';
      document.getElementById('apiresp').value = '';
      try {
        try {
          const res = await checkBalanceBlockstream(addr);
          return res;
        } catch (e1) {
          console.warn('Blockstream failed, trying BlockCypher', e1 && e1.message);
          const res2 = await checkBalanceBlockCypher(addr);
          return res2;
        }
      } catch (e) {
        throw e;
      }
    }

    document.getElementById('check').addEventListener('click', async () => {
      const addr = document.getElementById('address').value.trim();
      if (!addr) return alert('Genereer eerst een keypair.');
      try {
        const res = await checkBalance(addr);
        document.getElementById('balance').innerText = (res.total != null) ? res.total + ' sats' : 'n/a';
        document.getElementById('confirmed').innerText = (res.confirmed != null) ? res.confirmed + ' sats' : 'n/a';
        document.getElementById('unconfirmed').innerText = (res.unconfirmed != null) ? res.unconfirmed + ' sats' : 'n/a';
        document.getElementById('apiresp').value = JSON.stringify({source:res.source, raw:res.raw}, null, 2);
      } catch (err) {
        console.error(err);
        document.getElementById('balance').innerText = 'API fout';
        document.getElementById('apiresp').value = (err && err.toString()) || 'Error';
        alert('Kon saldo niet ophalen — controleer console of je internetverbinding. (CORS kan ook blokkeren)');
      }
    });

    // auto generate once on load for convenience
    (function init() {
      const { address, wif } = generateKeyPair();
      setGenerated(address, wif);
    })();
  </script>
</body>
</html>
